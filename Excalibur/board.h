#ifndef __board_h__
#define __board_h__

#include <iostream>
#include <string>
#include <sstream>
#include <iomanip>
#include <bitset>
#include <cctype>
#include <cstdlib>  // for rand
#include <ctime>
using namespace std; 
typedef unsigned long long Bit;  // Bitboard
typedef unsigned long long U64; // Unsigned ULL
typedef unsigned int uint;
typedef unsigned char uchar;
#define N 64
#define setbit(x) 1ULL<<(x)
#define unsetbit(x) ~(1ULL<<(x))

/* Piece identifiers, 4 bits each.
 * &8: white or black; &4: sliders; &2: horizontal/vertical slider; &1: diagonal slider
 * pawns and kings (without color bits), are < 3
 * major pieces (without color bits set), are > 5
 * minor and major pieces (without color bits set), are > 2
 */
const uchar WP = 1;         //  0001
const uchar WK= 2;         //  0010
const uchar WN= 3;         //  0011
const uchar WB=  5;        //  0101
const uchar WR= 6;         //  0110
const uchar WQ= 7;         //  0111
const uchar BP= 9;          //  1001
const uchar BK= 10;        //  1010
const uchar BN= 11;        //  1011
const uchar BB= 13;        //  1101
const uchar BR= 14;        //  1110
const uchar BQ= 15;        //  1111

// for the bitboard, a1 is considered the LEAST significant bit and h8 the MOST
class Board
{
public:
	// Bitmaps for all 12 kinds of pieces
	Bit wPawn, wKing, wKnight, wBishop, wRook, wQueen;
	Bit bPawn, bKing, bKnight, bBishop, bRook, bQueen;
	Bit wPieces, bPieces;

	Bit occupancy;  // everything

	// additional important var's
	uchar castle_w; // &1: O-O, &2: O-O-O
	uchar castle_b; 
	uchar turn; // white(0) or black(1)
	uint epSquare; // en passent square
	uint fiftyMove; // move since last pawn move or capture
	uint fullMove;  // starts at 1 and increments after black moves

	Board(); // Default constructor
	Board(string fen); // construct by FEN

	// parse a FEN position
	void parseFEN(string fen);
	
	// display the full board with letters as pieces. For testing
	void dispboard();

	// Get the attack masks, based on precalculated tables and current board status
	// non-sliding pieces
	Bit knight_attack(int pos) { return knight_tbl[pos]; }
	Bit king_attack(int pos) { return king_tbl[pos]; }
	Bit pawn_attack(int pos) { return pawn_tbl[pos][turn]; }
	Bit pawn_attack(int pos, int turn) { return pawn_tbl[pos][turn]; }

	// sliding pieces: only 1 lookup is needed. Efficiency maximized
	Bit rook_attack(int pos);
	Bit rook_attack(int pos, Bit occup);
	Bit bishop_attack(int pos);
	Bit bishop_attack(int pos, Bit occup);
	Bit queen_attack(int pos) { return rook_attack(pos) | bishop_attack(pos); }
	Bit queen_attack(int pos, Bit occup) { return rook_attack(pos, occup) | bishop_attack(pos, occup); }


	// Generate the U64 magic multipliers. Won't actually be run. Pretabulated literals
	friend void rook_magicU64_generator();  // will display the results to stdout
	friend void bishop_magicU64_generator();

private:
	// initialize the default piece positions
	void init_default();
	// refresh the wPieces, bPieces, occup0
	void refresh_pieces();

	// initialize *_attack[][] table
	void init_attack_tables();

	// Precalculated attack tables for sliding pieces. 
	uchar rook_key[N][4096]; // Rook attack keys. any &mask-result is hashed to 2 ** 12
	void init_rook_key(int pos, int x, int y);
	Bit rook_tbl[4900];  // Rook attack table. Use attack_key to lookup. 4900: all unique possible masks
	void init_rook_tbl(int pos, int x, int y);

	uchar bishop_key[N][512]; // Bishop attack keys. any &mask-result is hashed to 2 ** 9
	void init_bishop_key(int pos, int x, int y);
	Bit bishop_tbl[1428]; // Bishop attack table. 1428: all unique possible masks
	void init_bishop_tbl(int pos, int x, int y);

	// for the magics parameters. Will be precalculated
	struct Magics
	{
		Bit mask;  // &-mask
		uint offset;  // attack_key + offset == real attack lookup table index
	};
	Magics rook_magics[N];  // for each square
	Magics bishop_magics[N]; 
	void init_rook_magics(int pos, int x, int y);
	void init_bishop_magics(int pos, int x, int y);

	// Precalculated attack tables for non-sliding pieces
	Bit knight_tbl[N], king_tbl[N], pawn_tbl[N][2];
	// for none-sliding pieces
	void init_knight_tbl(int pos, int x, int y);
	void init_king_tbl(int pos, int x, int y);
	void init_pawn_tbl(int pos, int x, int y, int color);
};



// display a bitmap as 8*8. For testing
Bit dispbit(Bit, bool = 1);

// convert a square to its string pos representation, and vice versa
// a1 is 0 and h8 is 63
string pos2str(uint pos);
uint str2pos(string str);

// Constants for magics. Generated by the functions *_magicU64_generator()
const U64 ROOK_MAGIC[64] = {
	0x1100110020800040ULL, 0x840001408406000ULL, 0x23004f0040062000ULL, 0x6001003204001471ULL, 0x4300021500080410ULL, 0xc12020700040008ULL, 0x180004200081785ULL, 0x320000440c810462ULL,
	0x4044100800201102ULL, 0x100d043e2b014060ULL, 0x18a1004460710101ULL, 0x3006010218480506ULL, 0x2010400441406202ULL, 0x498500860440242ULL, 0x8c20a0210101171ULL, 0x4ee4300300110225ULL,
	0x2890301011413f80ULL, 0x1804024100084901ULL, 0x6620009d0006000bULL, 0x8050a3c40020408ULL, 0x1236030801014319ULL, 0x100406a019010601ULL, 0x711201501a42454eULL, 0x13a048200c40040eULL,
	0x13a684240001000ULL, 0x2760188310b2801ULL, 0x50034488120018baULL, 0x8050a3c40020408ULL, 0x7100203060090200ULL, 0x2d00084800e00114ULL, 0xaa002b40000411eULL, 0x6024024120400480ULL,
	0x5249032810200101ULL, 0x8c20a0210101171ULL, 0x300b420a001384ULL, 0x2888208e12180011ULL, 0x80020100200520ULL, 0x4881401201004c08ULL, 0x2226641804c01183ULL, 0x802114521000082ULL,
	0x2803128860404000ULL, 0x4881401201004c08ULL, 0x20911d0408c02250ULL, 0x104044041c260009ULL, 0x808000d03122010ULL, 0x41102a44211030ULL, 0x18a1004460710101ULL, 0x9c00a8064420011ULL,
	0x1642018401120050ULL, 0x4d545300244703a8ULL, 0x20201c8830bc1822ULL, 0x1908220110420200ULL, 0x119601802045900ULL, 0x2409401021ec3842ULL, 0x4b0304504011810ULL, 0x10c00ac302042008ULL,
	0x2190104902820022ULL, 0x3818200b00114092ULL, 0x2d262a602012001aULL, 0x1940120a12841036ULL, 0x6084030008004919ULL, 0x184132803c20012ULL, 0x3c812282080d4401ULL, 0x302d084402870a22ULL
};

const U64 BISHOP_MAGIC[64] = {
	
};

#define rhash(sq, rook) ((rook) * ROOK_MAGIC[sq])>>52  // get the hash value of a rook &-result, shift 64-12
#define bhash(sq, bishop) ((bishop) * BISHOP_MAGIC[sq])>>55  // get the hash value of a bishop &-result, shift 64-9

#endif // __board_h__
