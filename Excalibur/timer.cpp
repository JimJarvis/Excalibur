#include "timer.h"
#include "uci.h"
#include "search.h"

using namespace Search; // For "Limit" the Global LimitListener

// This lookup table will be filled at Search::init() (program startup)
// Naive statistical summary of "how many games are still undecided
// after x plies (half-moves). A game is considered undecided as long as 
// neither side has >2.75 pawns advantage. 
// Data is generated by a 3-piecewise regression function, obtained from CCRL database.
// Range: 7780 all the way down to 1, decreasing. Looks a bit like a logistic regression
float PlyWeights[512];

// PlyWeights access function
float ply_weight(int ply) { return PlyWeights[min(ply, 511)]; }

// Init the PlyWeights
void TimeKeeper::init()
{
	// 3- piecewise regression function. Use std functions from <cmath>
	for (int ply = 1; ply <= 60; ply++)
		PlyWeights[ply-1] = 7780 - 36219.06069 * exp(-222.57931/ply);
	
	for (int ply = 61; ply <= 100; ply++)
		// linear reg
		PlyWeights[ply-1] = 11733.4 - 78.93011 * ply;

	for (int ply = 101; ply <= 512; ply++)
		// exponential reg
		PlyWeights[ply-1] = 24163.94475 * pow(0.981726, ply);
}

// Helper: compute the remaining time, either Optimal or Maximal
template<bool Optimal> // set to false to compute maximual
long remaining(long time, int movestogo, int curPly)
{

}