/* Move tests */
#include "tests.h"

/**********************************************
Some useful test positions.
"r1bk3r/p2pBpNp/n4n2/1p1NP2P/6P1/3P4/P1P1K3/q5b1 b - - 1 23"  // Immortal game 
"1r2k3/pbPpnprp/1bn2P2/8/Q6q/B1PB1N2/P4PPP/3RR1K1 w - - 2 19"
"r3k2r/p1p1p3/8/1pP5/3pP2P/5b2/PP1P2PP/R3K2R w KQkq b6 2 32"  // en-passant and castling
"r3kN1r/p3p3/8/1pP5/5pPp/8/PP1P1p1P/R3K1N1 b Qkq g3 2 30"  // 2 en-passant captures
**********************************************/

// Wrapper for gen_moves<LEGAL>
class LegalIterator
{
public:
	LegalIterator(const Position& pos) : 
		it(mbuf), end(pos.gen_moves<LEGAL>(mbuf))
		{ end->move = MOVE_NULL; }
	void operator++() { it++; } // prefix version
	Move operator*() const { return it->move; }
	size_t size() const { return end - mbuf; }
private:
	MoveBuffer mbuf;
	ScoredMove *it, *end;
};

const int DD = 0; // divide depth
// Gen and counts pseudo-legal moves of a specific GenType
template<GenType GT>
static U64 pseudo_perft(Position& pos, int depth)
{
	MoveBuffer mbuf;

	U64 nodeCount = 0;
	Move m;
	StateInfo si;
	ScoredMove *it, *end = pos.gen_moves<GT>(mbuf);
	const bool leaf = depth == 1;
	for (it = mbuf, end->move = MOVE_NULL; it != end; ++it)
	{
		m = it->move;
		if (!pos.is_pseudo(m) || !pos.pseudo_is_legal(m, pos.pinned_map())) continue;
		pos.make_move(m, si);
		if (DD)
		{
			U64 show = leaf ? 1 : pseudo_perft<GT>(pos, depth - 1);
			if (depth == DD)
				cout << mv2str(m) << ": " << show << endl;
			nodeCount += show;
		}
		else
			nodeCount += (leaf ? 1 : pseudo_perft<GT>(pos, depth - 1));
		pos.unmake_move(m);
	}
	return nodeCount;
}

// Verifies pseudo-legal move generation by answers generated by Stockfish
// pseudo_captures.epd	 7 (depth)
// pseudo_quiets.epd  4
// pseudo_non_evasions.epd  4
// pseudo_evasions.epd  1
// pseudo_quiet_checks.epd  1
// Change the answer file and corresponding parameters here:
const string name = "evasions";
const GenType GT = EVASION;
const bool showTitle = false;  // show test title

TEST(Moves, PseudoPerft)
{
	string str, fen, title;

	//Position pp("8/8/2kbb3/6P1/2P2N2/1p6/4K1p1/N3R3 b - -");
	//cout << "LAST  " <<  pseudo_perft<GT>(pp, DD) << endl;
	//return;

	ifstream fin(("../../TestDrive/perft/pseudo_" + name + ".epd").c_str());
	U64 ans;
	int depth;
	fin >> str >> depth; // Read the depth from the file. "DEPTH 2"
	while (getline(fin, str))
	{
		if (str.empty()) continue;  // consume new lines
		title = str;
		if (showTitle)  cout << title << endl;
		getline(fin, fen);
		Position ptest(fen);
		for (int d = 1; d <= depth; d++)  // the epd file always counts up to 6 plies
		{
			getline(fin, str);  // consume
			ans = str2int(str);
			ASSERT_EQ(ans, pseudo_perft<GT>(ptest, d)) 
				<< title << " at depth " << d << "\n" << fen;
		}
	}
	if (showTitle)	 cout << "ALL PASSED" << endl;
}

TEST(Moves, Checks)
{
	bool verbose = false;
	// This position contains a lot of checks by the white side. Turn on 'verbose' to see the result.
	pos.parse_fen("1r1N3R/pbPpkP1p/1bn5/3P1pP1/Q6q/2P1B3/P4P1P/4R1K1 w - f6 10 34"); 
	int check = 0, quiet = 0; // count checking moves
	StateInfo si; 
	for (LegalIterator it(pos); *it; ++it)
	{
		Move m = *it;
		pos.make_move(m, si);
		if (pos.is_own_king_attacked())  // display checking moves
			{ if (verbose) cout << "check: " <<  m << endl;  check ++; }
		else // display non-threatening moves to the opposite king
			{ if (verbose) cout << "non: " <<  m << endl;  quiet ++; }
		pos.unmake_move(m);
	}
	ASSERT_EQ(16, check);
	ASSERT_EQ(43, quiet);
}

TEST(Moves, Judgement)
{
	Move m;
	RKiss::init_seed(107);
	Square from = RKiss::rand64() % 64;
	Square to = RKiss::rand64() % 64;
	set_from_to(m, from, to);
	PieceType proms[4] = {QUEEN, BISHOP, KNIGHT, ROOK}; // promoted
	for (PieceType prom : proms)
	{
		set_promo(m, prom);
		ASSERT_EQ(get_promo(m), prom);
		ASSERT_TRUE(is_promo(m));
		ASSERT_FALSE(is_ep(m));
		ASSERT_FALSE(is_castle(m));
		ASSERT_EQ(get_from(m), from);
		ASSERT_EQ(get_to(m), to);
	}
	clear(m);

	set_from_to(m, str2sq("c2"), str2sq("c4"));
	set_castle(m);
	ASSERT_FALSE(is_promo(m));
	ASSERT_TRUE(is_castle(m));
	ASSERT_FALSE(is_ep(m));
	ASSERT_EQ(get_from(m), 10);
	ASSERT_EQ(get_to(m), 26);
	clear(m);

	set_ep(m);
	ASSERT_FALSE(is_promo(m));
	ASSERT_FALSE(is_castle(m));
	ASSERT_TRUE(is_ep(m));
}

// Test pieceList[][][] consistency
bool is_piece_list_invariant(Position& pos)
{
	Square pieceListStd[COLOR_N][PIECE_TYPE_N][16];
	int index[COLOR_N][PIECE_TYPE_N];
	for (Color c : COLORS)
		for (PieceType pt : PIECE_TYPES)
			index[c][pt] = 0;
	for (int i = 0; i < SQ_N; i++)
	{
		Color c = pos.boardColor[i];
		if (c == COLOR_NULL) continue;
		PieceType pt = pos.boardPiece[i];
		pieceListStd[c][pt][index[c][pt]++] = i;
	}
	std::set<Square> setStd, setActual;
	for (Color c : COLORS)
		for (PieceType pt : PIECE_TYPES)
		{
			setStd.clear(); setActual.clear();
			for (int pc = 0; pc < pos.pieceCount[c][pt]; pc++)
			{
				setActual.insert(pos.pieceList[c][pt][pc]);
				setStd.insert(pieceListStd[c][pt][pc]);
			}
			if(setStd != setActual)
			{ EXPECT_EQ(setStd, setActual) << (c==W?"W":"B") << " " << PIECE_FULL_NAME[pt] << endl; return false; }
		}

	return true;
}

// test board internal state consistency after make/unmake
TEST(Moves, MakeUnmake)
{
	Position pos_orig;
	for (int i = 0; i < TEST_SIZE; i++)
	{
		pos = Position(fenList[i]);
		pos_orig = pos;
		StateInfo si;
		for (LegalIterator it(pos); *it; ++it)
		{
			Move m = *it;
			pos.make_move(m, si);

			ASSERT_TRUE(is_piece_list_invariant(pos)) << "Move " << ushort(m) << "\n" << fenList[i];
			
			pos.unmake_move(m);
			// enable the verbose version by overloading the op== in position.cpp
			//cout << (pos_orig == pos2 ? "pass" : "fail") << endl;
			ASSERT_EQ(pos_orig, pos) << "#" <<  i << " " << fenList[i] << "\n" << ushort(m);
		} 
	}
}


Move moveTrace[10];
string currentFEN;
#define errmsg print_move_trace(ply)
string print_move_trace(int ply)  // helper
{
	ostringstream oss;
	oss << currentFEN << endl;
	oss << "Move trace: ";
	for (int i = 0; i <= ply; i++)
		oss << ushort(moveTrace[i]) << "  ";
	return oss.str();
}

void test_key_invariant(Position& pos, int depth, int ply) // recursion helper
{
	if (depth == 0)  return;

	// generate from this ply
	Move m;
	StateInfo si;
	for (LegalIterator it(pos); *it; ++it)
	{
		moveTrace[ply] = m = *it;
		pos.make_move(m, si);
		
		ASSERT_EQ(pos.calc_key(), pos.st->key) << errmsg; 
		ASSERT_EQ(pos.calc_material_key(), pos.st->materialKey) << errmsg; 
		ASSERT_EQ(pos.calc_pawn_key(), pos.st->pawnKey) << errmsg; 
		ASSERT_EQ(pos.calc_psq_score(), pos.st->psqScore) << errmsg; 
		for (Color c : COLORS)
			ASSERT_EQ(pos.calc_non_pawn_material(c), pos.st->npMaterial[c]) << errmsg;

		//ASSERT_TRUE(is_piece_list_invariant(pos));

		test_key_invariant(pos, depth - 1, ply + 1);

		pos.unmake_move(m);
	}
}

// Test incrementally updated hash keys and scores. Recursive version
TEST(Moves, KeyInvariant)
{
	int depth = 3;  // how deep shall we verify
	for (int i = 0; i < TEST_SIZE; i++)
	{
		currentFEN = fenList[i];
		Position pos(currentFEN);
		test_key_invariant(pos, depth, 0);
		//cout << "Case " <<  i+1 << " passed" << endl;
	}
}

// Test pinned and discovered check maps.
TEST(Moves, Pinned)
{
	Position p1("3q2q1/3n1k2/8/1rpK2pr/4n3/3b4/3r2b1/8 b - - 0 1");
	Position p2("3Q2Q1/3N1K2/8/1RPk2PR/4N3/3B4/3R2B1/8 w - - 0 1");
	ASSERT_EQ(11259291395162112, p2.discv_map());
	ASSERT_EQ(p1.discv_map(), p2.discv_map());
}

// Test repetition draw.
#define Rep3Assert(ans) pp.make_move(mv, *sbuf++); \
	ASSERT_EQ(bool(ans), pp.is_draw<true>())
#define Rep2Assert(ans) ASSERT_EQ(bool(ans), pp.is_draw<false>())
TEST(Moves, RepetitionDraw)
{
	StateStack sb; StateInfo *sbuf = sb;
	// The rook and bishop goes back and forth to force repeitition
	Position pp("8/8/2p2K1B/1pq5/3k2P1/5P1P/1r6/8 w - - 10 23");
	Move mv;
	set_from_to(mv, 47, 29); // rep 1
	Rep3Assert(0); Rep2Assert(0); 
	set_from_to(mv, 9, 14);
	Rep3Assert(0); Rep2Assert(0);

	set_from_to(mv, 29, 47);
	Rep3Assert(0); Rep2Assert(0);
	set_from_to(mv, 14, 9);
	Rep3Assert(0); Rep2Assert(1);

	set_from_to(mv, 47, 29); // rep 2
	Rep3Assert(0); Rep2Assert(1);
	set_from_to(mv, 9, 14);
	Rep3Assert(0); Rep2Assert(1);

	set_from_to(mv, 29, 47);
	Rep3Assert(0); Rep2Assert(1);
	set_from_to(mv, 14, 9);
	Rep3Assert(1); Rep2Assert(1);

	set_from_to(mv, 47, 29);  // rep 3
	Rep3Assert(1); Rep2Assert(1);
	set_from_to(mv, 9, 14);
	Rep3Assert(1); Rep2Assert(1);

	set_from_to(mv, 29, 47); 
	Rep3Assert(1); Rep2Assert(1);
	set_from_to(mv, 14, 9);
	Rep3Assert(1); Rep2Assert(1);
}

// Test lsb, msb and bit_count
TEST(Misc, BitScan)
{
	for (int i = 5; i < 60; i++)
	{
		ASSERT_EQ(lsb((1ULL << i) + (3ULL << 61)), i);
		ASSERT_EQ(msb((1ULL << i) + 3), i);
	}
	Position p;
	for (int i = 0; i < TEST_SIZE; i++)
	{
		p.parse_fen(fenList[i]);
		for (Color c : COLORS)
			for (PieceType pt : PIECE_TYPES)
			{
				ASSERT_EQ(p.pieceCount[c][pt], bit_count(p.Pieces[pt][c]));
				ASSERT_EQ(p.pieceCount[c][pt], bit_count<CNT_FULL>(p.Pieces[pt][c]));
			}
	}
}